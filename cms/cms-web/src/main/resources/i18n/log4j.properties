#################################################
# 1.配置根Logger,其语法为：
#
#log4j.rootLogger = [level],appenderName,appendName2,....
#level是日志记录的优先级，分为OFF,TRACE,DEBUG,INFO,WARN,ERROR,FATAL,ALL
#Log4j建议只使用四个级别，优先级别从低到高分别是DEBUG,INFO,WARN,ERROR
#通过这里定义的级别，您可以控制到应用程序中相应级别的日志开关信息开关
#比如在这里定义了INFO级别，则DEBUG级别的日志信息将不被打印出来
#appenderName就是指定日志信息输出到哪个位置，可同时指定多个输出目的
###################################################
###################################################
#2.配置日志信息输出目的地Appender，其语法是：
#
#log4j.appender.appenderName = fully.qualified.name.of.appender.class
#log4j.appender.appenderName.optionN = valueN
#
#Log4j提供的appender有以下几种：
#1)org.apache.log4j.ConsoleAppender(输出到控制台)
#2)org.apache.log4j.FileAppender(输出到文件)
#3)org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)
#4)org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)
#5)org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)
#
#1)ConsoleAppender选项属性
#-Threshold = DEBUG：指定日志消息的输出最低层次
#-ImmediateFlush=TRUE ：默认值是true，所有的消息都会被立即输出
#-Target=System.err:默认值System.out,输出到控制台(err为红色，out为黑色)
#
#2)FileAppender选项属性
#-Threshold=INFO:指定日志消息的输出最低层次
#-ImmediateFlush = TRUE ：默认值是true，所有消息会被立即输出
#-File = C:\log4j.log:指定消息输出到C:\log4j.log文件中
#-Append = FALSE:默认值是true，将消息追加到指定文件中，false指将消息覆盖指定的文件内容
#-Encoding = UTF-8:可以指定文件编码格式
#
#3)DailyRollingFileAppender选项属性
#-Threshold = WARN：指定日志消息的输出最低层次
#-ImmediateFlush=TRUE：默认值true
#-File=C:\log4j.log
#-Append = FALSE:
#-DatePattern='.'yyyy-ww:每周滚动一次文件，即每周产生一个新的文件，还可以按一下参数：
#              '.'yyyy-MM :每月
#              '.'yyyy-ww :每周
#              '.'yyyy-MM-dd :每天
#              '.'yyyy-MM-a :每天两次
#              '.'yyyy-MM-HH :每小时
#              '.'yyyy-MM-HH-mm :每分钟
#-Encoding = UTF-8 :指定文件编码格式
#
#4)RollingFileAppender选项属性
#-Threshold=ERROR
#-ImmediateFlush=TRUE
#-File=C:/log4j.log
#-Append = FALSE：默认值true
#-MaxFile=100KB：后缀可以是KB、MB、GB，在该文件达到大小时，将会自动滚动，如log4j.log.1
#-MaxBackupIndex = 2 ：指定可以产生的滚动文件的最大数
#-Encoding = UTF-8
#
###################################################
###################################################
#3配置日志消息的格式(布局)，其语法为：
#
#log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class
#log4j.appender.appenderName.layout.optionN = valueN
#
#Log4j提供的layout有以下几种：
#5)org.apache.log4j.HTMLLayout(以HTML表格形式布局)
#6)org.apache.log4j.PatternLayout(可以灵活的指定布局方式)
#7)org.apache.log4j.SimpleLayout(包含日志消息的级别和消息字符串)
#8)org.apache.log4j.TTCCLayout(包含日志产生的时间，线程，类别等等消息)
#9)org.apache.log4j.xml.XMLLayout(以XML的格式布局)
#
#5)HTMLLayout选项属性
#-LocationInfo = TRUE：默认值false，输出java文件名称和行号
#-Title=Struts Log Message ：默认值Log4J Log Messages
#
#6)PatternLayout选项属性
#-ConversionPattern = %m%n :格式化指定的的消息
#
#9)XMLLayout选项属性
#-LocationInfo = TRUE ：默认值false，输出java文件名称和行号
#
#Log4j采用类似C语言中的print函数的打印格式格式化日志信息，打印参数如下：
# %m 输出代码中指定的消息
# %p 输出优先级，即DEBUG、INFO、WARN、ERROR、FATAL
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目，通常是所在类的全名
# %t 输出产生该日志事件的线程名称
# %n 输出一个回车换行符，windows平台为"\r\n",Unix平台为”\n“
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式：
#   如：%d{yyyy年MM月dd日 HH:mm:ss,SSS},输出类似：2012年01月12日 22:22:22,456
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数
#   如：TestLog.main(TestLog.java:10)
# %F 输出日志消息产生时所在的文件名称
# %L 输出代码中行号
# %x 输出和当前线程相关联的NDC(嵌套诊断环境)，像java servlets多客户多线程的引用中
# %% 输出一个“%”字符
#
#可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对其方式。如：
#  %5c: 输出category名称，最小宽度是5，category<5，默认的情况下右对齐
#  %-5c:输出category名称，最小宽度是5，category<5，"-"号指定左对齐,会有空格
#  %.5c:输出category名称，最大宽度是5，category>5，就会将左边多出的字符截掉，<5不会有空格
#  %20.30c:category名称<20补空格，并且右对齐，>30字符，就从左边交远销出的字符截掉
################################################################################
################################################################################
#4指定特定包的输出特定的级别
#log4j.logger.org.springframework = DEBUG
#################################################################################
log4j.debug=false
log4j.rootLogger=info,stdout

#Console output
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d [%t] %-5p [%c] -%m%n

#Spring logging configuration
log4j.logger.druid.sql = warn,stdout
log4j.logger.druid.sql.DataSource=warn,stdout
log4j.logger.druid.sql.Connection=warn,stdout
log4j.logger.druid.sql.Statement=warn,stdout
log4j.logger.druid.sql.ResultSet=warn,stdout

#Mybatis logging configuration
log4j.logger.com.hou.cms.mapper=debug